// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define _ThreadGroupSize 8 // Sync this with PlanetGenerator constant IMPORTANT!!

struct vertexData {
	float4 pos;
	float2 uv;
};

struct indexData {
	uint index;
};

uint _Size;
float _HalfSize;
RWStructuredBuffer<vertexData> _Vertices; //TODO NAMING CONVENTION
RWStructuredBuffer<indexData> _Indices; //TODO NAMING CONVENTION

[numthreads(_ThreadGroupSize, _ThreadGroupSize,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x + (id.y)*_Size;
	uint iidx = 6 * (id.x + (id.y)*(_Size -1));

	_Vertices[idx].pos = float4((float)id.x - _HalfSize, 0, (float)id.y - _HalfSize,0);
	_Vertices[idx].uv = float2((float)id.x, (float)id.y);

	if ((id.x < _Size - 1) && (id.y < _Size - 1)) {

		_Indices[iidx].index = idx + _Size;
		_Indices[iidx + 1].index = idx + _Size + 1;
		_Indices[iidx + 2].index = idx;

		_Indices[iidx + 3].index = idx + 1;
		_Indices[iidx + 4].index = idx;
		_Indices[iidx + 5].index = idx + _Size + 1; 
	}
}


/*        data[] d = new data[squareSize * squareSize];
        int[] indices = new int[(squareSize - 1) * (squareSize - 1) * 6];
        int c = 0;

        float halfSize = 0.5f;

        for (int i = 0; i < squareSize; i++) {
            for (int j = 0; j < squareSize; j++) {
                d[c].vertex = new Vector4(i - halfSize, 0, j - halfSize);
                d[c].uv = new Vector2(i, j);
                if ((i < squareSize - 1) && (j < squareSize - 1)) {
                    indices[6 * (i + j * (squareSize-1))] = c;
                    indices[6 * (i + j * (squareSize - 1)) + 1] = c+squareSize+1;
                    indices[6 * (i + j * (squareSize - 1)) + 2] = c+squareSize;

                    indices[6 * (i + j * (squareSize - 1)) +3] = c + squareSize + 1;
                    indices[6 * (i + j * (squareSize - 1)) + 4] = c;
                    indices[6 * (i + j * (squareSize - 1)) + 5] = c + 1;
                }
                c++;
				}*/